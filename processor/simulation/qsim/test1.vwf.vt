// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/16/2021 20:55:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg fast_clk;
reg resetn;
reg slow_clk;
// wires                                               
wire beqo;
wire bneo;
wire branch_out;
wire [31:0] inst_out;
wire jump_out;
wire [31:0] pc_out;
wire [31:0] read_data1_out;
wire [31:0] read_data2_out;
wire [4:0] read_reg1_out;
wire [4:0] read_reg2_out;
wire [31:0] write_data_out;
wire [4:0] write_reg_out;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.beqo(beqo),
	.bneo(bneo),
	.branch_out(branch_out),
	.fast_clk(fast_clk),
	.inst_out(inst_out),
	.jump_out(jump_out),
	.pc_out(pc_out),
	.read_data1_out(read_data1_out),
	.read_data2_out(read_data2_out),
	.read_reg1_out(read_reg1_out),
	.read_reg2_out(read_reg2_out),
	.resetn(resetn),
	.slow_clk(slow_clk),
	.write_data_out(write_data_out),
	.write_reg_out(write_reg_out)
);
initial 
begin 
#100000000 $finish;
end 

// slow_clk
always
begin
	slow_clk = 1'b0;
	slow_clk = #500000 1'b1;
	#500000;
end 

// fast_clk
always
begin
	fast_clk = 1'b0;
	fast_clk = #50000 1'b1;
	#50000;
end 

// resetn
initial
begin
	resetn = 1'b0;
	resetn = #640000 1'b1;
end 
endmodule


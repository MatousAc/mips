// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/30/2021 19:58:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] funct;
reg [5:0] opcode;
// wires                                               
wire [3:0] ALUControl;
wire ALUsrc;
wire Beq;
wire Bne;
wire Jal;
wire Jr;
wire Jump;
wire MemRead;
wire MemtoReg;
wire MemWrite;
wire RegDst;
wire RegWrite;

// assign statements (if any)                          
control i1 (
// port map - connection between master ports and signals/registers   
	.ALUControl(ALUControl),
	.ALUsrc(ALUsrc),
	.Beq(Beq),
	.Bne(Bne),
	.funct(funct),
	.Jal(Jal),
	.Jr(Jr),
	.Jump(Jump),
	.MemRead(MemRead),
	.MemtoReg(MemtoReg),
	.MemWrite(MemWrite),
	.opcode(opcode),
	.RegDst(RegDst),
	.RegWrite(RegWrite)
);
initial 
begin 
#1000000 $finish;
end 
// opcode[ 5 ]
initial
begin
	opcode[5] = 1'b0;
	opcode[5] = #260000 1'b1;
	opcode[5] = #20000 1'b0;
	opcode[5] = #40000 1'b1;
	opcode[5] = #20000 1'b0;
	opcode[5] = #120000 1'b1;
	opcode[5] = #20000 1'b0;
	opcode[5] = #40000 1'b1;
	opcode[5] = #20000 1'b0;
end 
// opcode[ 4 ]
initial
begin
	opcode[4] = 1'b0;
	opcode[4] = #260000 1'b1;
	opcode[4] = #20000 1'b0;
	opcode[4] = #40000 1'b1;
	opcode[4] = #20000 1'b0;
end 
// opcode[ 3 ]
initial
begin
	opcode[3] = 1'b0;
	opcode[3] = #260000 1'b1;
	opcode[3] = #20000 1'b0;
	opcode[3] = #40000 1'b1;
	opcode[3] = #80000 1'b0;
	opcode[3] = #40000 1'b1;
	opcode[3] = #20000 1'b0;
	opcode[3] = #20000 1'b1;
	opcode[3] = #60000 1'b0;
end 
// opcode[ 2 ]
initial
begin
	opcode[2] = 1'b0;
	opcode[2] = #260000 1'b1;
	opcode[2] = #20000 1'b0;
	opcode[2] = #40000 1'b1;
	opcode[2] = #20000 1'b0;
	opcode[2] = #40000 1'b1;
	opcode[2] = #80000 1'b0;
	opcode[2] = #20000 1'b1;
	opcode[2] = #20000 1'b0;
end 
// opcode[ 1 ]
initial
begin
	opcode[1] = 1'b0;
	opcode[1] = #260000 1'b1;
	opcode[1] = #80000 1'b0;
	opcode[1] = #100000 1'b1;
	opcode[1] = #40000 1'b0;
	opcode[1] = #20000 1'b1;
	opcode[1] = #40000 1'b0;
end 
// opcode[ 0 ]
initial
begin
	opcode[0] = 1'b0;
	opcode[0] = #260000 1'b1;
	opcode[0] = #20000 1'b0;
	opcode[0] = #20000 1'b1;
	opcode[0] = #40000 1'b0;
	opcode[0] = #20000 1'b1;
	opcode[0] = #20000 1'b0;
	opcode[0] = #40000 1'b1;
	opcode[0] = #80000 1'b0;
	opcode[0] = #20000 1'b1;
	opcode[0] = #20000 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #20000 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #80000 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #40000 1'b1;
	funct[5] = #20000 1'b0;
	funct[5] = #450000 1'b1;
	funct[5] = #60000 1'b0;
	funct[5] = #40000 1'b1;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
	funct[4] = #260000 1'b1;
	funct[4] = #20000 1'b0;
	funct[4] = #40000 1'b1;
	funct[4] = #20000 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
	funct[3] = #60000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #120000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #40000 1'b1;
	funct[3] = #20000 1'b0;
	funct[3] = #510000 1'b1;
	funct[3] = #20000 1'b0;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #20000 1'b1;
	funct[2] = #40000 1'b0;
	funct[2] = #60000 1'b1;
	funct[2] = #40000 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #40000 1'b1;
	funct[2] = #20000 1'b0;
	funct[2] = #490000 1'b1;
	funct[2] = #20000 1'b0;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
	funct[1] = #80000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #20000 1'b0;
	funct[1] = #20000 1'b1;
	funct[1] = #80000 1'b0;
	funct[1] = #40000 1'b1;
	funct[1] = #20000 1'b0;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
	funct[0] = #20000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #40000 1'b1;
	funct[0] = #40000 1'b0;
	funct[0] = #120000 1'b1;
	funct[0] = #40000 1'b0;
	funct[0] = #40000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #470000 1'b1;
	funct[0] = #20000 1'b0;
	funct[0] = #140000 1'b1;
	funct[0] = #20000 1'b0;
end 
endmodule

